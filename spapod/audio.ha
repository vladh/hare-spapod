def SPA_AUDIO_MAX_CHANNELS: uint = 64;
def SPA_AUDIO_FLAG_NONE: u32 = 0;
def SPA_AUDIO_FLAG_UNPOSITIONED: u32 = 1 << 0;
export type spa_audio_format = enum u32 {
	UNKNOWN,
	ENCODED,
	START_Interleaved = 0x100,
	S8,
	U8,
	S16_LE,
	S16_BE,
	U16_LE,
	U16_BE,
	S24_32_LE,
	S24_32_BE,
	U24_32_LE,
	U24_32_BE,
	S32_LE,
	S32_BE,
	U32_LE,
	U32_BE,
	S24_LE,
	S24_BE,
	U24_LE,
	U24_BE,
	S20_LE,
	S20_BE,
	U20_LE,
	U20_BE,
	S18_LE,
	S18_BE,
	U18_LE,
	U18_BE,
	F32_LE,
	F32_BE,
	F64_LE,
	F64_BE,
	ULAW,
	ALAW,
	START_Planar = 0x200,
	U8P,
	S16P,
	S24_32P,
	S32P,
	S24P,
	F32P,
	F64P,
	S8P,
	START_Other = 0x400,
	DSP_S32 = S24_32P,
	DSP_F32 = F32P,
	DSP_F64 = F64P,
	// Fields from here on are specific to little endian
	// TODO: big endian
	S16 = S16_LE,
	U16 = U16_LE,
	S24_32 = S24_32_LE,
	U24_32 = U24_32_LE,
	S32 = S32_LE,
	U32 = U32_LE,
	S24 = S24_LE,
	U24 = U24_LE,
	S20 = S20_LE,
	U20 = U20_LE,
	S18 = S18_LE,
	U18 = U18_LE,
	F32 = F32_LE,
	F64 = F64_LE,
	S16_OE = S16_BE,
	U16_OE = U16_BE,
	S24_32_OE = S24_32_BE,
	U24_32_OE = U24_32_BE,
	S32_OE = S32_BE,
	U32_OE = U32_BE,
	S24_OE = S24_BE,
	U24_OE = U24_BE,
	S20_OE = S20_BE,
	U20_OE = U20_BE,
	S18_OE = S18_BE,
	U18_OE = U18_BE,
	F32_OE = F32_BE,
	F64_OE = F64_BE,
};
